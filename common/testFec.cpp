#include "FuncubeLib.h"

#include "gmock\gmock.h" 
#include "gtest\gtest.h"

#include "FuncubeLib.h"
#include "fec.h"
#include "CodecAo40.h"
#include "BpskDecoder.h"
#include "StopWatch.h"
#include "Encode.h"
#include "stdio.h"

using namespace std;

class CEncodeNoBufGenWrap : public CEncode {
public:
	BYTE GetNextTxBit() { return CEncode::GetNextTxBit(); }
	fc::AutoBufPtr GenerateNextBuffer() { return m_poolSamplesOut.GetBuffer(); }
};

TEST(FecTests, EncodeDecode)
{
	U8 sourceBytes[BLOCK_SIZE];	
	memset(sourceBytes, 42, BLOCK_SIZE);

	CCodecAO40 ao40;
	const U8* encoded = ao40.encode((unsigned char*)sourceBytes, BLOCK_SIZE);
	
	U8 softBits[5200];
	for(int i=0;i<5200;i++)
	{
		softBits[i] = encoded[i]?255:0;
	}
    
	U8 decodedBytes[BLOCK_SIZE];
	CFec fec;
	BOOL result = fec.Decode(softBits, decodedBytes);
	int errorCount = fec.LastErrorCount();

	EXPECT_EQ(TRUE, result);
	EXPECT_EQ(0, errorCount);
}

TEST(FecTests, EncodeDecodeReal)
{
	U8 sourceBytes[BLOCK_SIZE] = { 225, 12, 0, 0, 231, 32, 0, 32, 97, 81, 223, 192, 36, 116, 31, 12, 5, 69, 132, 197, 90, 157, 20, 27, 85, 1, 192, 112, 32, 7, 1, 192, 7, 168, 68, 68, 89, 10, 47, 253, 146, 145, 131, 80, 82, 27, 131, 53, 85, 80, 0, 94, 148, 0, 143, 2, 85, 104, 17, 0, 43, 34, 19, 0, 21, 1, 234, 112, 31, 29, 15, 99, 72, 147, 172, 157, 1, 4, 117, 4, 84, 129, 134, 15, 6, 139, 133, 143, 212, 136, 92, 249, 163, 206, 104, 153, 59, 236, 39, 32, 254, 85, 104, 182, 213, 37, 65, 39, 208, 84, 83, 76, 209, 196, 204, 35, 44, 221, 130, 140, 213, 72, 165, 191, 150, 228, 110, 131, 203, 135, 167, 204, 195, 63, 165, 114, 38, 118, 61, 11, 225, 201, 66, 219, 74, 183, 161, 20, 197, 149, 157, 24, 16, 85, 135, 170, 228, 127, 245, 234, 82, 195, 56, 164, 220, 61, 40, 185, 86, 26, 161, 152, 12, 187, 3, 236, 58, 254, 29, 169, 222, 106, 128, 114, 113, 206, 57, 164, 227, 184, 168, 229, 4, 33, 242, 163, 5, 189, 168, 230, 14, 82, 108, 6, 25, 3, 143, 90, 107, 130, 64, 35, 60, 118, 221, 138, 169, 12, 55, 73, 42, 153, 10, 149, 57, 45, 146, 56, 246, 21, 112, 146, 51, 142, 61, 192, 207, 249, 162, 226, 72, 110, 11, 49, 37, 0, 231, 168, 60, 226, 153, 36, 40, 234, 20, 200 };

	U8 expectedSoftbits[5200] = {};
	S8 expectedHardbits[5200] = {};

	CCodecAO40 ao40;
	const U8* encoded = ao40.encode((unsigned char*)sourceBytes, BLOCK_SIZE);

	S8 actualHardbits[5200];
	U8 actualSoftbits[5200];
	for (int i = 0; i<5200; i++)
	{
		actualHardbits[i] = encoded[i] ? 1 : -1;
		actualSoftbits[i] = encoded[i] ? 223 : 32;
	}

	for (int i = 0; i < 5200; i++)
	{
		EXPECT_EQ(expectedHardbits[i], actualHardbits[i]);
		EXPECT_EQ(expectedSoftbits[i], actualSoftbits[i]);
	}
}

TEST(FecTests, ErrorCorrect)
{
	U8 sourceBytes[BLOCK_SIZE];	
	memset(sourceBytes, 42, BLOCK_SIZE);

	CCodecAO40 ao40;
	const U8* encoded = ao40.encode((unsigned char*)sourceBytes, BLOCK_SIZE);
	
	U8 softBits[5200];
	for(int i=0;i<5200;i++)
	{
		softBits[i] = encoded[i]?223:32;
	}

	int expectedErrors = 541;
	for(int i=2000;i<3100;i++)
	{
		softBits[i] = 129;
	}
    
	U8 decodedBytes[BLOCK_SIZE];
	CFec fec;
	BOOL result = fec.Decode(softBits, decodedBytes);
	int errorCount = fec.LastErrorCount();

	EXPECT_EQ(TRUE, result);
	EXPECT_EQ(expectedErrors, errorCount);
}

TEST(FecTests, FuncubeLibCanCollectInitial)
{
	BOOL expected = FALSE;

	Encode_Initialize();

	BOOL actual = Encode_CanCollect();

	Encode_Shutdown();

	EXPECT_EQ(expected, actual);	
}

TEST(FecTests, FuncubeLibCanCollectDataPushed)
{
	BOOL expected = TRUE;

	CStopWatch sw;
	BYTE sourceBytes[BLOCK_SIZE];
	memset(sourceBytes, 42, BLOCK_SIZE);

	Encode_Initialize();
	Encode_PushData(&sourceBytes[0], BLOCK_SIZE);



	BOOL actual = Encode_CanCollect();

	Encode_Shutdown();

	EXPECT_EQ(expected, actual);
}

TEST(FecTests, FuncubeLibFecEncode)
{	
	U8 sourceBytes[BLOCK_SIZE];
	U8 resultBytes[5200];
	memset(sourceBytes, 42, BLOCK_SIZE);

	CCodecAO40 ao40;
	const U8* encoded = ao40.encode((unsigned char*)sourceBytes, BLOCK_SIZE);

	CFec fec;
	fec.Encode((unsigned char*)sourceBytes, BLOCK_SIZE, (unsigned char*)&resultBytes[0], 5200);

	U8 softBits[5200];
	for (int i = 0; i<5200; i++)
	{
		EXPECT_EQ(encoded[i], resultBytes[i]);
		softBits[i] = resultBytes[i] ? 255 : 0;
	}

	U8 decodedBytes[BLOCK_SIZE];	
	BOOL result = fec.Decode(softBits, decodedBytes);
	int errorCount = fec.LastErrorCount();

	EXPECT_EQ(TRUE, result);
	EXPECT_EQ(0, errorCount);
}

TEST(FecTests, FuncubeLibEncodeGetBits)
{
	BOOL expected = TRUE;
	// expected sync vector bits after dpbsk encoding
	BYTE dbpskSyncvecBits[32] = { 1,0,1,1, 1,0,0,1, 1,1,0,1, 1,1,1,1, 1,1,1,1, 1,1,0,1, 0,1,0,0, 0,0,1,1 };

	CEncodeNoBufGenWrap encoder;

	CStopWatch sw;
	BYTE sourceBytes[BLOCK_SIZE];
	memset(sourceBytes, 42, BLOCK_SIZE);

	encoder.Initialise();
	encoder.PushData(&sourceBytes[0], BLOCK_SIZE);
		

	
	U8 bits[6000];
	for (int i = 0; i < 6000; i++) {
		bits[i] = encoder.GetNextTxBit();
		if (i < 768) {
			EXPECT_EQ(i % 2 > 0 ? 0 : 1, bits[i]);
		}
	}
	for (int i = 0; i < 32; i++) {
		EXPECT_EQ(dbpskSyncvecBits[i], bits[i + 768]);
	}

	encoder.Shutdown();

}

TEST(FecTests, FuncubeLibEncodeGetAudioBits)
{
	BOOL expected = TRUE;
	BYTE samples[160];

	CEncode encoder;

	CStopWatch sw;
	BYTE sourceBytes[BLOCK_SIZE] = { 225, 12, 0, 0, 231, 32, 0, 32, 97, 81, 223, 192, 36, 116, 31, 12, 5, 69, 132, 197, 90, 157, 20, 27, 85, 1, 192, 112, 32, 7, 1, 192, 7, 168, 68, 68, 89, 10, 47, 253, 146, 145, 131, 80, 82, 27, 131, 53, 85, 80, 0, 94, 148, 0, 143, 2, 85, 104, 17, 0, 43, 34, 19, 0, 21, 1, 234, 112, 31, 29, 15, 99, 72, 147, 172, 157, 1, 4, 117, 4, 84, 129, 134, 15, 6, 139, 133, 143, 212, 136, 92, 249, 163, 206, 104, 153, 59, 236, 39, 32, 254, 85, 104, 182, 213, 37, 65, 39, 208, 84, 83, 76, 209, 196, 204, 35, 44, 221, 130, 140, 213, 72, 165, 191, 150, 228, 110, 131, 203, 135, 167, 204, 195, 63, 165, 114, 38, 118, 61, 11, 225, 201, 66, 219, 74, 183, 161, 20, 197, 149, 157, 24, 16, 85, 135, 170, 228, 127, 245, 234, 82, 195, 56, 164, 220, 61, 40, 185, 86, 26, 161, 152, 12, 187, 3, 236, 58, 254, 29, 169, 222, 106, 128, 114, 113, 206, 57, 164, 227, 184, 168, 229, 4, 33, 242, 163, 5, 189, 168, 230, 14, 82, 108, 6, 25, 3, 143, 90, 107, 130, 64, 35, 60, 118, 221, 138, 169, 12, 55, 73, 42, 153, 10, 149, 57, 45, 146, 56, 246, 21, 112, 146, 51, 142, 61, 192, 207, 249, 162, 226, 72, 110, 11, 49, 37, 0, 231, 168, 60, 226, 153, 36, 40, 234, 20, 200 };

	encoder.Initialise();
	cerr << "PushData:" << endl;
	encoder.PushData(&sourceBytes[0], BLOCK_SIZE);

	static int bufCount = 0;
	FILE* fp = fopen("dbpsk.raw", "wb");
	while (!encoder.AllDataCollected()) {
		ULONG bufferSize = 160;
		if(encoder.CanCollect()) {
			encoder.CollectSamples(samples, &bufferSize);
			if (bufferSize != 160) {
				cerr << "Error partial buffer: " << bufferSize << endl;
			}
			else {
				for (int i = 0; i <  160; i++) {					
					fwrite(&samples[i], 1, 1, fp);
				}
			}
		}
	}
	fclose(fp);

	encoder.Shutdown();
}

TEST(FecTests, FuncubeLibEncodeDecodeAudioBits)
{
	BOOL hasDecoded = FALSE;
	FLOAT decodedFreq = 0.0;
	BYTE samples[160];

	COscillator osc;
	osc.Initialise(2400.0F, 48000.0F);
	CEncode encoder;
	CRollingAverage aveDCOffset;
	CRollingAverage aveGain;
	aveDCOffset.SetAverageSamples(1000);
	aveDCOffset.SetAverage(0.0F);
	aveGain.SetAverageSamples(1000);
	aveGain.SetAverage(0.0F);
	CBpskDecoder *pdecoder = new CBpskDecoder(NULL, NULL,FALSE,48000, 48000);
	pdecoder->SetTuneFrequency(2400.0);
	
	BYTE sourceBytes[BLOCK_SIZE] = { 225, 12, 0, 0, 231, 32, 0, 32, 97, 81, 223, 192, 36, 116, 31, 12, 5, 69, 132, 197, 90, 157, 20, 27, 85, 1, 192, 112, 32, 7, 1, 192, 7, 168, 68, 68, 89, 10, 47, 253, 146, 145, 131, 80, 82, 27, 131, 53, 85, 80, 0, 94, 148, 0, 143, 2, 85, 104, 17, 0, 43, 34, 19, 0, 21, 1, 234, 112, 31, 29, 15, 99, 72, 147, 172, 157, 1, 4, 117, 4, 84, 129, 134, 15, 6, 139, 133, 143, 212, 136, 92, 249, 163, 206, 104, 153, 59, 236, 39, 32, 254, 85, 104, 182, 213, 37, 65, 39, 208, 84, 83, 76, 209, 196, 204, 35, 44, 221, 130, 140, 213, 72, 165, 191, 150, 228, 110, 131, 203, 135, 167, 204, 195, 63, 165, 114, 38, 118, 61, 11, 225, 201, 66, 219, 74, 183, 161, 20, 197, 149, 157, 24, 16, 85, 135, 170, 228, 127, 245, 234, 82, 195, 56, 164, 220, 61, 40, 185, 86, 26, 161, 152, 12, 187, 3, 236, 58, 254, 29, 169, 222, 106, 128, 114, 113, 206, 57, 164, 227, 184, 168, 229, 4, 33, 242, 163, 5, 189, 168, 230, 14, 82, 108, 6, 25, 3, 143, 90, 107, 130, 64, 35, 60, 118, 221, 138, 169, 12, 55, 73, 42, 153, 10, 149, 57, 45, 146, 56, 246, 21, 112, 146, 51, 142, 61, 192, 207, 249, 162, 226, 72, 110, 11, 49, 37, 0, 231, 168, 60, 226, 153, 36, 40, 234, 20, 200 };
	COMPLEXSTRUCT fsamples[40];

	encoder.Initialise();
	cerr << "PushData:" << endl;
	encoder.PushData(&sourceBytes[0], BLOCK_SIZE);

	static int bufCount = 0;
	FILE* fp = fopen("dbpsk-2400.raw", "wb");
	while (!encoder.AllDataCollected()) {
		ULONG bufferSize = 160;
		if (encoder.CanCollect()) {
			encoder.CollectSamples(samples, &bufferSize);			
			if (bufferSize != 160) {
				cerr << "Error partial buffer: " << bufferSize << endl;
			}
			else {				
				FLOAT sample, dcOffset, scale;
				for (int i = 0; i < 40; i++) {
					sample = *((FLOAT*)&samples[i * 4]);
					osc.MixSample(sample, /* out */sample);
					
					dcOffset = aveDCOffset.Average(sample);
					sample -= dcOffset;

					scale = aveGain.Average(fabsf(sample));
					sample *= (0.5 / scale);
					
					fsamples[i].fRe = sample;
					fsamples[i].fIm = 0.0F;
										
					fwrite(&sample, 1, 4, fp);
				}
				
				pdecoder->ProcessAudio(&fsamples[0], 40);
				if (pdecoder->LastDecodeElapsedSecs()>-1.0) {
					hasDecoded = TRUE;
					decodedFreq = pdecoder->LastDecodeFrequency();
				}
			}
		}
	}
	fclose(fp);

	encoder.Shutdown();
	EXPECT_EQ(TRUE, hasDecoded);	
	EXPECT_EQ(2400.0, decodedFreq);
}
